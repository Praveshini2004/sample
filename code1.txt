import requests

# Replace with your actual backend URL
BASE_URL = "http://127.0.0.1:8000"

def get_book_by_id(book_id):
    url = f"{BASE_URL}/books/{book_id}"
    response = requests.get(url)
    
    if response.status_code == 200:
        book = response.json()
        print("Book Found:")
        print(f"ID: {book['id']}")
        print(f"Title: {book['title']}")
        print(f"Author: {book['author']}")
        print(f"Price: {book['price']}")
        print(f"Stock: {book['stock']}")
    elif response.status_code == 404:
        print(f"Book with ID {book_id} not found.")
    else:
        print(f"Error: {response.status_code} - {response.text}")

# Example usage
if __name__ == "__main__":
    book_id = int(input("Enter Book ID to fetch: "))
    get_book_by_id(book_id)



from fastapi import FastAPI, HTTPException, Depends
from sqlalchemy.orm import Session
import crud, models, schemas
from database import SessionLocal, engine

app = FastAPI()

models.Base.metadata.create_all(bind=engine)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.get("/books/{book_id}", response_model=schemas.Book)
def read_book(book_id: int, db: Session = Depends(get_db)):
    db_book = crud.get_book_by_id(db, book_id)
    if db_book is None:
        raise HTTPException(status_code=404, detail="Book not found")
    return db_book
